/**
 * Am√©liorations pour le modal de cr√©ation/modification de plats
 * Gestion des suggestions d'emojis et formatage automatique des prix
 */

/**
 * Liste d'emojis sugg√©r√©s pour les plats
 */
export const EMOJIS_PLATS = [
    // Plats principaux
    'üçó', 'üçñ', 'ü•©', 'üç§', 'ü¶ê', 'üêü', 'üê†', 'ü¶Ä',
    'üçù', 'üçú', 'üç≤', 'ü•ò', 'üçõ', 'üç±', 'ü•ô', 'üåÆ',
    'üåØ', 'ü•™', 'üçï', 'üçî', 'üå≠', 'ü•ì', 'üç≥', 'üßÄ',
    
    // L√©gumes et accompagnements
    'ü•ó', 'ü•í', 'ü•ï', 'üåΩ', 'ü•î', 'üçÖ', 'ü•¨', 'ü•¶',
    'üçÜ', 'üå∂Ô∏è', 'ü´ë', 'ü•ë', 'üçÑ', 'üßÑ', 'üßÖ', 'ü•ñ',
    
    // Fruits et desserts
    'üçé', 'üçå', 'üçì', 'ü•≠', 'üçë', 'üçí', 'ü•ù', 'üçá',
    'üç∞', 'üßÅ', 'üçÆ', 'üç≠', 'üç´', 'üç™', 'ü•ß', 'üç©',
    
    // Boissons
    '‚òï', 'üçµ', 'ü•§', 'üßÉ', 'üç∑', 'üç∫', 'ü•õ', 'üßã',
    
    // Autres
    'üçΩÔ∏è', 'ü•Ñ', 'üç¥', 'üî•', '‚ùÑÔ∏è', 'üåø', '‚≠ê', 'üíé'
];

/**
 * Liste d'emojis sugg√©r√©s pour les accompagnements
 */
export const EMOJIS_ACCOMPAGNEMENTS = [
    // L√©gumes racines et tubercules
    'ü•î', 'ü•ï', 'üßÑ', 'üßÖ', 'üç†', 'ü´ò', 'üå∞',
    
    // L√©gumes verts et salades
    'ü•¨', 'ü•¶', 'ü•í', 'üåΩ', 'üçÖ', 'ü•ë', 'ü´ë', 'üå∂Ô∏è',
    
    // C√©r√©ales et f√©culents
    'üçö', 'üçû', 'ü•ñ', 'ü•®', 'ü´ì', 'ü•Ø', 'üßà', 'ü•ú',
    
    // L√©gumineuses et graines
    'ü´ò', 'üå±', 'üåø', 'ü•ú', 'üåæ', 'ü´õ',
    
    // Fruits
    'üçã', 'üçä', 'üçé', 'üçå', 'ü•≠', 'üçá', 'üçì', 'ü•ù',
    
    // Herbes et √©pices
    'üåø', 'üçÉ', 'üå±', 'üßÇ', 'ü´ö', 'üå∂Ô∏è',
    
    // Produits laitiers et fromages
    'üßÄ', 'ü•õ', 'üßà', 'ü••',
    
    // Autres accompagnements
    'ü•ó', 'üçÑ', 'ü•ñ', 'üçΩÔ∏è', '‚≠ê', 'ÔøΩÔøΩ'
];

/**
 * Classe pour g√©rer les am√©liorations du modal
 */
export class ModalEnhancements {
    constructor() {
        this.emojiInput = null;
        this.prixInput = null;
        this.suggestionsContainer = null;
        this.initialiser();
    }

    /**
     * Initialise les am√©liorations du modal
     */
    initialiser() {
        this.emojiInput = document.getElementById('emoji');
        this.prixInput = document.getElementById('prix');
        this.suggestionsContainer = document.getElementById('emoji-suggestions');

        if (this.emojiInput && this.suggestionsContainer) {
            this.configurerSuggestionsEmojis();
        }

        if (this.prixInput) {
            this.configurerFormatagePrix();
        }
    }

    /**
     * Configure les suggestions d'emojis
     * @param {string} inputId - ID du champ input emoji
     * @param {string} containerId - ID du conteneur des suggestions
     * @param {string} type - Type d'emojis ('plats' ou 'accompagnements')
     */
    configurerSuggestionsEmojis(inputId = 'emoji', containerId = 'emoji-suggestions', type = 'plats') {
        const emojiInput = document.getElementById(inputId);
        const suggestionsContainer = document.getElementById(containerId);
        
        if (!emojiInput || !suggestionsContainer) {
            console.warn(`√âl√©ments non trouv√©s: ${inputId} ou ${containerId}`);
            return;
        }

        // Choisir la liste d'emojis appropri√©e
        const emojis = type === 'accompagnements' ? EMOJIS_ACCOMPAGNEMENTS : EMOJIS_PLATS;
        
        // G√©n√©rer les suggestions d'emojis
        this.genererSuggestionsEmojis(emojiInput, suggestionsContainer, emojis);

        // √âv√©nement focus pour afficher les suggestions
        emojiInput.addEventListener('focus', () => {
            suggestionsContainer.style.display = 'grid';
        });

        // √âv√©nement pour masquer les suggestions quand on clique ailleurs
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.form-group')) {
                suggestionsContainer.style.display = 'none';
            }
        });
    }

    /**
     * G√©n√®re les suggestions d'emojis dans le conteneur
     * @param {HTMLElement} emojiInput - Champ input emoji
     * @param {HTMLElement} suggestionsContainer - Conteneur des suggestions
     * @param {Array} emojis - Liste des emojis √† afficher
     */
    genererSuggestionsEmojis(emojiInput, suggestionsContainer, emojis) {
        suggestionsContainer.innerHTML = emojis
            .map(emoji => `
                <span class="emoji-suggestion" data-emoji="${emoji}" title="S√©lectionner ${emoji}">
                    ${emoji}
                </span>
            `).join('');

        // Ajouter les √©v√©nements de clic sur chaque emoji
        suggestionsContainer.querySelectorAll('.emoji-suggestion').forEach(suggestion => {
            suggestion.addEventListener('click', (e) => {
                const emoji = e.target.dataset.emoji;
                emojiInput.value = emoji;
                suggestionsContainer.style.display = 'none';
                
                // D√©clencher l'√©v√©nement change pour la validation
                emojiInput.dispatchEvent(new Event('change'));
            });
        });
    }

    /**
     * Configure le formatage automatique des prix
     */
    configurerFormatagePrix() {
        // Formatage en temps r√©el pendant la saisie
        this.prixInput.addEventListener('input', (e) => {
            this.formaterPrix(e.target);
        });

        // Formatage final quand on quitte le champ
        this.prixInput.addEventListener('blur', (e) => {
            this.formaterPrixFinal(e.target);
        });
    }

    /**
     * Formate le prix pendant la saisie
     * @param {HTMLInputElement} input - Champ de saisie du prix
     */
    formaterPrix(input) {
        let valeur = input.value;
        
        // Supprimer tous les caract√®res non num√©riques sauf la virgule et le point
        valeur = valeur.replace(/[^\d,.-]/g, '');
        
        // Remplacer le point par une virgule pour la d√©cimale
        valeur = valeur.replace('.', ',');
        
        // Limiter √† une seule virgule
        const parties = valeur.split(',');
        if (parties.length > 2) {
            valeur = parties[0] + ',' + parties.slice(1).join('');
        }
        
        // Limiter les d√©cimales √† 2 chiffres
        if (parties.length === 2 && parties[1].length > 2) {
            valeur = parties[0] + ',' + parties[1].substring(0, 2);
        }
        
        input.value = valeur;
    }

    /**
     * Formatage final du prix avec ajout automatique du symbole ‚Ç¨
     * @param {HTMLInputElement} input - Champ de saisie du prix
     */
    formaterPrixFinal(input) {
        let valeur = input.value.trim();
        
        if (valeur && !valeur.includes('‚Ç¨')) {
            // Ajouter le symbole ‚Ç¨ s'il n'est pas pr√©sent
            valeur += ' ‚Ç¨';
            input.value = valeur;
        }
    }

    /**
     * R√©initialise les am√©liorations pour un nouveau modal
     */
    reinitialiser() {
        if (this.suggestionsContainer) {
            this.suggestionsContainer.style.display = 'none';
        }
        
        if (this.emojiInput) {
            this.emojiInput.value = '';
        }
        
        if (this.prixInput) {
            this.prixInput.value = '';
        }
    }

    /**
     * Pr√©-remplit les champs pour la modification
     * @param {Object} plat - Donn√©es du plat √† modifier
     */
    preremplirChamps(plat) {
        if (this.emojiInput && plat.emoji) {
            this.emojiInput.value = plat.emoji;
        }
        
        if (this.prixInput && plat.prix) {
            this.prixInput.value = plat.prix;
        }
    }
} 